if Rayfield then
    Rayfield:Destroy()
end
print([[#######################################################################################
            #                                                                                     # 
            #          ####  #####   ######   ########        ########   ######### ####   ####    #
            #         #### #####  ########## ##########      ########## ###        ####  ####     #
            #        #########   ####   ###  ####  ####      ####  #### #########  #### ####      #
            =        #########  #####       ####  ####      ####  ##### ########   ########       #
            #       ##### ####  ########## ###########     ########### ###         ######         #
            #      #####  #####  ########  #########       #########  #########    #####          #
            #                                                                                     #
            #######################################################################################
            #  CREDIT:      ##   Universal-Hub                                                    #
            #  -KCD Dev     ##   -Press K to Hide UI                                              #
            #  -KienPC1234  ##   -Press Q to Toggle Tracer                                        #
            #  -Exunys      ##   -Press Right Click to use Aim Bot                                #
            #               ##   -Github Page:https://github.com/KienPC1234/Universal-Hub         #
            #######################################################################################]])
local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/KienPC1234/Universal-Hub/main/Module/Rayfield.lua'))()
getgenv().SecureMode = _G.SecureMode
loadstring(game:HttpGet("https://raw.githubusercontent.com/KienPC1234/Universal-Hub/main/Module/ESP.lua"))()
loadstring(game:HttpGet("https://raw.githubusercontent.com/KienPC1234/Universal-Hub/main/Module/Hitbox.lua"))()
local loadstringTracersExists = pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/Exunys/Tracers-Script/main/Tracers.lua"))()
end)
local loadstringAimBotExists = pcall(function()
    --[[

	Universal Aimbot Module by Exunys Â© CC0 1.0 Universal (2023 - 2024)
	https://github.com/Exunys

]]

--// Cache

local game, workspace = game, workspace
local getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick, select = getrawmetatable, getmetatable, setmetatable, pcall, getgenv, next, tick, select
local Vector2new, Vector3new, Vector3zero, CFramenew, Color3fromRGB, Color3fromHSV, Drawingnew, TweenInfonew = Vector2.new, Vector3.new, Vector3.zero, CFrame.new, Color3.fromRGB, Color3.fromHSV, Drawing.new, TweenInfo.new
local getupvalue, mousemoverel, tablefind, tableremove, stringlower, stringsub, mathclamp = debug.getupvalue, mousemoverel or (Input and Input.MouseMove), table.find, table.remove, string.lower, string.sub, math.clamp

local GameMetatable = getrawmetatable(game)
local __index = GameMetatable.__index
local __newindex = GameMetatable.__newindex
local GetService = __index(game, "GetService")

--// Services

local RunService = GetService(game, "RunService")
local UserInputService = GetService(game, "UserInputService")
local TweenService = GetService(game, "TweenService")
local Players = GetService(game, "Players")

--// Degrade "__index" and "__newindex" functions if the executor doesn't support "getrawmetatable" properly.

local ReciprocalRelativeSensitivity = false

if select(2, pcall(__index, Players, "LocalPlayer")) then
	ReciprocalRelativeSensitivity = true

	__index, __newindex = function(Object, Key)
		return Object[Key]
	end, function(Object, Key, Value)
		Object[Key] = Value
	end
end

--// Service Methods

local LocalPlayer = __index(Players, "LocalPlayer")
local Camera = __index(workspace, "CurrentCamera")

local FindFirstChild, FindFirstChildOfClass = __index(game, "FindFirstChild"), __index(game, "FindFirstChildOfClass")
local GetDescendants = __index(game, "GetDescendants")
local WorldToViewportPoint = __index(Camera, "WorldToViewportPoint")
local GetPartsObscuringTarget = __index(Camera, "GetPartsObscuringTarget")
local GetMouseLocation = __index(UserInputService, "GetMouseLocation")
local GetPlayers = __index(Players, "GetPlayers")

--// Variables

local RequiredDistance, Typing, Running, ServiceConnections, Animation, OriginalSensitivity = 2000, false, false, {}
local Connect, Disconnect, GetRenderProperty, SetRenderProperty = __index(game, "DescendantAdded").Connect

local UWP = false

do
	xpcall(function()
		local TemporaryDrawing = Drawingnew("Line")
		GetRenderProperty = getupvalue(getmetatable(TemporaryDrawing).__index, 4)
		SetRenderProperty = getupvalue(getmetatable(TemporaryDrawing).__newindex, 4)
		TemporaryDrawing.Remove(TemporaryDrawing)
	end, function()
		UWP, GetRenderProperty, SetRenderProperty = true, function(Object, Key)
			return Object[Key]
		end, function(Object, Key, Value)
			Object[Key] = Value
		end
	end)

	local TemporaryConnection = Connect(__index(game, "DescendantAdded"), function() end)
	Disconnect = TemporaryConnection.Disconnect
	Disconnect(TemporaryConnection)
end

--// Checking for multiple processes

if ExunysDeveloperAimbot then
	ExunysDeveloperAimbot:Exit()
end

--// Environment

getgenv().ExunysDeveloperAimbot = {
	DeveloperSettings = {
		UpdateMode = "RenderStepped",
		TeamCheckOption = "TeamColor",
		RainbowSpeed = 1 -- Bigger = Slower
	},

	Settings = {
		Enabled = true,

		TeamCheck = false,
		AliveCheck = true,
		WallCheck = false,

		OffsetToMoveDirection = false,
		OffsetIncrement = 2,

		Sensitivity = 0, -- Animation length (in seconds) before fully locking onto target
		Sensitivity2 = 3.5, -- mousemoverel Sensitivity

		LockMode = 1, -- 1 = CFrame; 2 = mousemoverel
		LockPart = "Head", -- Body part to lock on

		TriggerKey = Enum.UserInputType.E,
		Toggle = false
	},

	FOVSettings = {
		Enabled = true,
		Visible = true,

		Radius = 90,
		NumSides = 60,

		Thickness = 1,
		Transparency = 1,
		Filled = false,

		RainbowColor = false,
		RainbowOutlineColor = false,
		Color = Color3fromRGB(255, 255, 255),
		OutlineColor = Color3fromRGB(0, 0, 0),
		LockedColor = Color3fromRGB(255, 150, 150)
	},

	Blacklisted = {},
	FOVCircle = Drawingnew("Circle"),
	FOVCircleOutline = Drawingnew("Circle")
}

local Environment = getgenv().ExunysDeveloperAimbot

SetRenderProperty(Environment.FOVCircle, "Visible", false)
SetRenderProperty(Environment.FOVCircleOutline, "Visible", false)

--// Core Functions

local FixUsername = function(String)
	local Result

	for _, Value in next, GetPlayers(Players) do
		local Name = __index(Value, "Name")

		if stringsub(stringlower(Name), 1, #String) == stringlower(String) then
			Result = Name
		end
	end

	return Result
end

local GetRainbowColor = function()
	local RainbowSpeed = Environment.DeveloperSettings.RainbowSpeed

	return Color3fromHSV(tick() % RainbowSpeed / RainbowSpeed, 1, 1)
end

local ConvertVector = function(Vector)
	return Vector2new(Vector.X, Vector.Y)
end

local CancelLock = function()
	Environment.Locked = nil

	local FOVCircle = UWP and Environment.FOVCircle or Environment.FOVCircle.__OBJECT

	SetRenderProperty(FOVCircle, "Color", Environment.FOVSettings.Color)
	__newindex(UserInputService, "MouseDeltaSensitivity", OriginalSensitivity)

	if Animation then
		Animation:Cancel()
	end
end

local GetClosestPlayer = function()
	local Settings = Environment.Settings
	local LockPart = Settings.LockPart

	if not Environment.Locked then
		RequiredDistance = Environment.FOVSettings.Enabled and Environment.FOVSettings.Radius or 2000

		for _, Value in next, GetPlayers(Players) do
			local Character = __index(Value, "Character")
			local Humanoid = Character and FindFirstChildOfClass(Character, "Humanoid")

			if Value ~= LocalPlayer and not tablefind(Environment.Blacklisted, __index(Value, "Name")) and Character and FindFirstChild(Character, LockPart) and Humanoid then
				local PartPosition, TeamCheckOption = __index(Character[LockPart], "Position"), Environment.DeveloperSettings.TeamCheckOption

				if Settings.TeamCheck and __index(Value, TeamCheckOption) == __index(LocalPlayer, TeamCheckOption) then
					continue
				end

				if Settings.AliveCheck and __index(Humanoid, "Health") <= 0 then
					continue
				end

				if Settings.WallCheck then
					local BlacklistTable = GetDescendants(__index(LocalPlayer, "Character"))

					for _, Value in next, GetDescendants(Character) do
						BlacklistTable[#BlacklistTable + 1] = Value
					end

					if #GetPartsObscuringTarget(Camera, {PartPosition}, BlacklistTable) > 0 then
						continue
					end
				end

				local Vector, OnScreen, Distance = WorldToViewportPoint(Camera, PartPosition)
				Vector = ConvertVector(Vector)
				Distance = (GetMouseLocation(UserInputService) - Vector).Magnitude

				if Distance < RequiredDistance and OnScreen then
					RequiredDistance, Environment.Locked = Distance, Value
				end
			end
		end
	elseif (GetMouseLocation(UserInputService) - ConvertVector(WorldToViewportPoint(Camera, __index(__index(__index(Environment.Locked, "Character"), LockPart), "Position")))).Magnitude > RequiredDistance then
		CancelLock()
	end
end

local Load = function()
	OriginalSensitivity = __index(UserInputService, "MouseDeltaSensitivity")

	local Settings, FOVCircle, FOVCircleOutline, FOVSettings, Offset = Environment.Settings, Environment.FOVCircle, Environment.FOVCircleOutline, Environment.FOVSettings
	local OffsetToMoveDirection, LockPart = Settings.OffsetToMoveDirection, Settings.LockPart

	if not UWP then
		FOVCircle, FOVCircleOutline = FOVCircle.__OBJECT, FOVCircleOutline.__OBJECT
	end

	SetRenderProperty(FOVCircle, "ZIndex", 2)
	SetRenderProperty(FOVCircleOutline, "ZIndex", 1)

	ServiceConnections.RenderSteppedConnection = Connect(__index(RunService, Environment.DeveloperSettings.UpdateMode), function()
		if FOVSettings.Enabled and Settings.Enabled then
			for Index, Value in next, FOVSettings do
				if Index == "Color" then
					continue
				end

				if pcall(GetRenderProperty, FOVCircle, Index) then
					SetRenderProperty(FOVCircle, Index, Value)
					SetRenderProperty(FOVCircleOutline, Index, Value)
				end
			end

			SetRenderProperty(FOVCircle, "Color", (Environment.Locked and FOVSettings.LockedColor) or FOVSettings.RainbowColor and GetRainbowColor() or FOVSettings.Color)
			SetRenderProperty(FOVCircleOutline, "Color", FOVSettings.RainbowOutlineColor and GetRainbowColor() or FOVSettings.OutlineColor)

			SetRenderProperty(FOVCircleOutline, "Thickness", FOVSettings.Thickness + 1)
			SetRenderProperty(FOVCircle, "Position", GetMouseLocation(UserInputService))
			SetRenderProperty(FOVCircleOutline, "Position", GetMouseLocation(UserInputService))
		else
			SetRenderProperty(FOVCircle, "Visible", false)
			SetRenderProperty(FOVCircleOutline, "Visible", false)
		end

		if Running and Settings.Enabled then
			GetClosestPlayer()

			if Environment.Locked and Environment.Locked.Character and Environment.Locked.Character.Humanoid then
                Offset = ExunysDeveloperAimbot.Settings.OffsetToMoveDirection and Environment.Locked.Character.Humanoid.MoveDirection * ExunysDeveloperAimbot.Settings.OffsetIncrement or Vector3.new(0,0,0)

				local LockedPosition_Vector3 = __index(__index(Environment.Locked, "Character")[LockPart], "Position")
                local LockedPosition = WorldToViewportPoint(Camera, LockedPosition_Vector3 + Offset)

				local RelativeSensitivity = ReciprocalRelativeSensitivity and (1 / Settings.Sensitivity2) or Settings.Sensitivity2

				if Environment.Settings.LockMode == 2 then
					mousemoverel((LockedPosition.X - GetMouseLocation(UserInputService).X) * RelativeSensitivity, (LockedPosition.Y - GetMouseLocation(UserInputService).Y) * RelativeSensitivity)
				else
					if Settings.Sensitivity > 0 then
						Animation = TweenService:Create(Camera, TweenInfonew(Environment.Settings.Sensitivity, Enum.EasingStyle.Sine, Enum.EasingDirection.Out), {CFrame = CFramenew(Camera.CFrame.Position, LockedPosition_Vector3)})
						Animation:Play()
					else
						__newindex(Camera, "CFrame", CFramenew(Camera.CFrame.Position, LockedPosition_Vector3 + Offset))
					end

					__newindex(UserInputService, "MouseDeltaSensitivity", 0)
				end

				SetRenderProperty(FOVCircle, "Color", FOVSettings.LockedColor)
			end
		end
	end)

	ServiceConnections.InputBeganConnection = Connect(__index(UserInputService, "InputBegan"), function(Input)
		local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle

		if Typing then
			return
		end

		if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
			if Toggle then
				Running = not Running

				if not Running then
					CancelLock()
				end
			else
				Running = true
			end
		end
	end)

	ServiceConnections.InputEndedConnection = Connect(__index(UserInputService, "InputEnded"), function(Input)
		local TriggerKey, Toggle = Settings.TriggerKey, Settings.Toggle

		if Toggle or Typing then
			return
		end

		if Input.UserInputType == Enum.UserInputType.Keyboard and Input.KeyCode == TriggerKey or Input.UserInputType == TriggerKey then
			Running = false
			CancelLock()
		end
	end)
end

--// Typing Check

ServiceConnections.TypingStartedConnection = Connect(__index(UserInputService, "TextBoxFocused"), function()
	Typing = true
end)

ServiceConnections.TypingEndedConnection = Connect(__index(UserInputService, "TextBoxFocusReleased"), function()
	Typing = false
end)

--// Functions

function Environment.Exit(self) -- METHOD | ExunysDeveloperAimbot:Exit(<void>)
	assert(self, "EXUNYS_AIMBOT-V3.Exit: Missing parameter #1 \"self\" <table>.")

	for Index, _ in next, ServiceConnections do
		Disconnect(ServiceConnections[Index])
	end

	Load = nil; ConvertVector = nil; CancelLock = nil; GetClosestPlayer = nil; GetRainbowColor = nil; FixUsername = nil

	self.FOVCircle:Remove()
	self.FOVCircleOutline:Remove()
	getgenv().ExunysDeveloperAimbot = nil
end

function Environment.Restart() -- ExunysDeveloperAimbot.Restart(<void>)
	for Index, _ in next, ServiceConnections do
		Disconnect(ServiceConnections[Index])
	end

	Load()
end

function Environment.Blacklist(self, Username) -- METHOD | ExunysDeveloperAimbot:Blacklist(<string> Player Name)
	assert(self, "EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #1 \"self\" <table>.")
	assert(Username, "EXUNYS_AIMBOT-V3.Blacklist: Missing parameter #2 \"Username\" <string>.")

	Username = FixUsername(Username)

	assert(self, "EXUNYS_AIMBOT-V3.Blacklist: User "..Username.." couldn't be found.")

	self.Blacklisted[#self.Blacklisted + 1] = Username
end

function Environment.Whitelist(self, Username) -- METHOD | ExunysDeveloperAimbot:Whitelist(<string> Player Name)
	assert(self, "EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #1 \"self\" <table>.")
	assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: Missing parameter #2 \"Username\" <string>.")

	Username = FixUsername(Username)

	assert(Username, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." couldn't be found.")

	local Index = tablefind(self.Blacklisted, Username)

	assert(Index, "EXUNYS_AIMBOT-V3.Whitelist: User "..Username.." is not blacklisted.")

	tableremove(self.Blacklisted, Index)
end

Environment.Load = Load -- ExunysDeveloperAimbot.Load()

setmetatable(Environment, {__call = Load})

Environment()
end)
if loadstringAimBotExists then
    print("AimBot Loaded!")
end
if loadstringTracersExists then
    print("Tracer Loaded!")
else
    print("Error, Can't Load Tracer, using Backup")
    loadstring(game:HttpGet("https://raw.githubusercontent.com/KienPC1234/Universal-Hub/main/Backup/Tracers.lua"))()
end
_G.TracersVisible = false
_G.DisableKey = nil
_G.ModeSkipKey =nil
ExunysDeveloperAimbot.Load()
ExunysDeveloperAimbot.Settings.Enabled = false
--Get Player Path
local partNames = {} 
function GetPlayerPath()
    local player = game.Players:GetPlayers()[math.random(1, #game.Players:GetPlayers())]
    local character = player.Character
    if character then
        local parts = character:GetDescendants() 
        for _, part in ipairs(parts) do
            if part:IsA("BasePart") then
                if part.Name~="Handle" then   
                    table.insert(partNames, part.Name)                  
                end                
            end
        end
    
    else
        wait(1)
        GetPlayerPath()
    end
end
GetPlayerPath()
local Window = Rayfield:CreateWindow({
    Name = "Universal Hub",
    LoadingTitle = "Universal Hub",
    LoadingSubtitle = "by KCD Dev",
    ConfigurationSaving = {
       Enabled = true,
       FolderName = "UH_Save", 
       FileName = "Universal_HUB_Save"
    },
    Discord = {
        Enabled = false,
        Invite = "noinvitelink", 
        RememberJoins = true 
     },
     KeySystem = false, 
     KeySettings = {
        Title = "Untitled",
        Subtitle = "Key System",
        Note = "No method of obtaining the key is provided",
        FileName = "Key", 
        SaveKey = true, 
        GrabKeyFromSite = false, 
        Key = {"Hello"} 
     }
 })
local Tab = Window:CreateTab("Hit Box", 18298162898)
local Tab2 = Window:CreateTab("ESP", 18298164473)
local Tab3 = Window:CreateTab("Aim Bot",18312822691)
local Tab4 = Window:CreateTab("Misc", 18314098431)
local Toggle1 = Tab:CreateToggle({
    Name = "Hit Box Toggle",
    CurrentValue = false,
    Flag = "Toggle1",
    Callback = function(Value)
        if Value==false then
            ClearHitBox()
        end
        _G.HitboxEnabled = Value
    end,
 })
local Slider = Tab:CreateSlider({
   Name = "Hit Box Size",
   Range = {0, 50},
   Increment = 0.5,
   Suffix = " Studs",
   CurrentValue = 20,
   Flag = "Slider", 
   Callback = function(Value)
    _G.HSize = Value
   end,
})
local Slider99 = Tab:CreateSlider({
    Name = "Hit Box Head Size",
    Range = {0,6},
    Increment = 0.5,
    Suffix = " Studs",
    CurrentValue = 5,
    Flag = "Slider99", 
    Callback = function(Value)
         _G.Size = Value
    end,
 })
local Slider2 = Tab:CreateSlider({
    Name = "Transparency",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = 0.7,
    Flag = "Slider2", 
    Callback = function(Value)
        if _G.HitboxEnabled == true then
           _G.Transparency=Value
        end   
    end,
 })
local Dropdown = Tab:CreateDropdown({
   Name = "Hit Box Type",
   Options = {"Head","HumanoidRootPart"},
   CurrentOption = {"HumanoidRootPart"},
   MultipleOptions = false,
   Flag = "Dropdown", 
   Callback = function(Option)
    if tostring(Option[1])=="Head" then
        _G.HitboxType = 2
    else 
        _G.HitboxType = 1
    end
   end,
})
--Tab2
local Button = Tab2:CreateButton({
    Name = "Use UnnamedESP",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/ic3w0lf22/Unnamed-ESP/master/UnnamedESP.lua'))()
    end,
 })
local Label = Tab2:CreateLabel("ESP")
local Toggle2 = Tab2:CreateToggle({
    Name = "ESP Toggle",
    CurrentValue = false,
    Flag = "Toggle2",
    Callback = function(Value)
        if Value == false then
            _G.EspEnabled = false
            DeleteESP()
        else
            _G.EspEnabled = true
       end
    end,
 })
local Toggle3 = Tab2:CreateToggle({
   Name = "ESP Visible Check",
   CurrentValue = false,
   Flag = "Toggle3",
   Callback = function(Value)
    _G.EspVisibleCheck =Value
    ESPDethMode()
   end,
})
local Label = Tab2:CreateLabel("Tracer Config")
local Toggle4 = Tab2:CreateToggle({
   Name = "Tracer Toggle",
   CurrentValue = false,
   Flag = "Toggle4",
   Callback = function(Value)
       _G.TracersVisible =Value
   end,
})
local Toggle7 = Tab2:CreateToggle({
    Name = "Tracer Team Check",
    CurrentValue = false,
    Flag = "Toggle7",
    Callback = function(Value)
        _G.TeamCheck =Value
    end,
 })
local Slider4 = Tab2:CreateSlider({
   Name = "Tracer Transparency",
   Range = {0, 1},
   Increment = 0.1,
   Suffix = "",
   CurrentValue = 0.7,
   Flag = "Slider4", 
   Callback = function(Value)
    _G.TracerTransparency=Value
   end,
})
local Slider90 = Tab2:CreateSlider({
    Name = "Tracer Thickness",
    Range = {0, 100},
    Increment = 1,
    Suffix = "",
    CurrentValue = 1,
    Flag = "Slider90", 
    Callback = function(Value)
        _G.TracerThickness=Value
    end,
 })
local Dropdown2 = Tab2:CreateDropdown({
   Name = "Tracers Position",
   Options = {"From Mouse","From Center","From Bottom"},
   CurrentOption = {"From Bottom"},
   MultipleOptions = false,
   Flag = "Dropdown2", 
   Callback = function(Option)
    if tostring(Option[1])=="From Mouse" then
        _G.FromMouse = true
        _G.FromCenter = false
        _G.FromBottom = false
    elseif tostring(Option[1])=="From Center" then
        _G.FromMouse = false
        _G.FromCenter = true
        _G.FromBottom = false
    else
        _G.FromMouse = false
        _G.FromCenter = false
        _G.FromBottom = true
    end
   end,
})
local ColorPicker1 = Tab2:CreateColorPicker({
    Name = "Tracer Color",
    Color = Color3.fromRGB(255, 80, 10),
    Flag = "ColorPicker1", 
    Callback = function(Value)
        _G.TracerColor = Value
    end
})
local Keybind1 = Tab2:CreateKeybind({
    Name = "Tracer Keybind",
    CurrentKeybind = "Q",
    HoldToInteract = false,
    Flag = "Keybind1", 
    Callback = function(Keybind)
        if _G.TracersVisible == true then
            _G.TracersVisible = false
        else
            _G.TracersVisible = true
        end
    end,
 })

--aimbot Tab
local Labelaims = Tab3:CreateLabel("AimBot Setting")
local Paragraph = Tab3:CreateParagraph({Title = "", Content = "Right Click to Use AimBot"})
local Toggleaim = Tab3:CreateToggle({
    Name = "AimBot Enabled",
    CurrentValue = false,
    Flag = "Toggleaim",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.Enabled = Value
    end,
 })
local Toggleaim1 = Tab3:CreateToggle({
   Name = "AimBot Toggle",
   CurrentValue = false,
   Flag = "Toggleaim1",
   Callback = function(Value)
     ExunysDeveloperAimbot.Settings.Toggle= Value      
   end,
})
local Dropdownaim2 = Tab3:CreateDropdown({
    Name = "AimBot Lock Part",
    Options = partNames,
    CurrentOption = {"Head"},
    MultipleOptions = false,
    Flag = "Dropdownaim2", 
    Callback = function(Option)
        print(tostring(Option[1]))
        ExunysDeveloperAimbot.Settings.LockPart = tostring(Option[1])
    end,
 })
local Toggleaim2 = Tab3:CreateToggle({
    Name = "AimBot Team Check",
    CurrentValue = false,
    Flag = "Toggleaim2",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.TeamCheck= Value        
    end,
 })
 local Toggleaim3 = Tab3:CreateToggle({
    Name = "AimBot Alive Check",
    CurrentValue = true,
    Flag = "Toggleaim3",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.AliveCheck = Value        
    end,
 })
 local Toggleaim4 = Tab3:CreateToggle({
    Name = "AimBot Wall Check",
    CurrentValue = false,
    Flag = "Toggleaim4",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.WallCheck= Value        
    end,
 })
 local Toggleaim5 = Tab3:CreateToggle({
    Name = "AimBot Prediction",
    CurrentValue = false,
    Flag = "Toggleaim5",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.OffsetToMoveDirection = Value        
    end,
 })
 local Paragraph = Tab3:CreateParagraph({Title = "", Content = "AimBot Prediction is used to predict the bullet's falling point to help increase the hit rate when the enemy moves!"})
 local Slideraim = Tab3:CreateSlider({
    Name = "AimBot Amplitude",
    Range = {0, 5},
    Increment = 1,
    Suffix = "",
    CurrentValue = ExunysDeveloperAimbot.Settings.OffsetIncrement,
    Flag = "Slideraim",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.OffsetIncrement = Value        
    end,
 })
 local Dropdownaim = Tab3:CreateDropdown({
    Name = "AimBot Lock Mode",
    Options = {"CFrame","mousemoverel"},
    CurrentOption = {"CFrame"},
    MultipleOptions = false,
    Flag = "Dropdownaim", 
    Callback = function(Option)
       if tostring(Option[1]) == "CFrame" then
            ExunysDeveloperAimbot.Settings.LockMode = 1   
        else
            ExunysDeveloperAimbot.Settings.LockMode = 2   
       end
    end,
 })
 local Slideraims = Tab3:CreateSlider({
    Name = "AimBot CFrame Sensitivity",
    Range = {0, 4},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = 0,
    Flag = "Slideraims",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.Sensitivity = Value        
    end,
 })
 local Slideraims2 = Tab3:CreateSlider({
    Name = "AimBot mousemoverel Sensitivity",
    Range = {0, 4},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = 3.5,
    Flag = "Slideraims2",
    Callback = function(Value)
        ExunysDeveloperAimbot.Settings.Sensitivity2 = Value        
    end,
 })
local Labelaims2 = Tab3:CreateLabel("AimBot FOV Settings")
local Toggleaim7 = Tab3:CreateToggle({
    Name = "FOV Enabled",
    CurrentValue = true,
    Flag = "Toggleaim7",
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.Enabled = Value        
    end,
 })
local Toggleaim8 = Tab3:CreateToggle({
   Name = "FOV Visible",
   CurrentValue = true,
   Flag = "Toggleaim8",
   Callback = function(Value)
       ExunysDeveloperAimbot.FOVSettings.Visible = Value        
   end,
})
local Slideraims4 = Tab3:CreateSlider({
    Name = "FOV Radius",
    Range = {0, 180},
    Increment = 10,
    Suffix = "",
    CurrentValue = 90,
    Flag = "Slideraims4",
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.Radius = Value
    end,
 })
 local ColorPicker3 = Tab3:CreateColorPicker({
    Name = "FOV Color",
    Color = Color3.fromRGB(255,255,255),
    Flag = "ColorPicker3", 
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.Color= Value
    end
})
 local ColorPicker4 = Tab3:CreateColorPicker({
    Name = "FOV Outline Color",
    Color = Color3.fromRGB(0, 0, 0),
    Flag = "ColorPicker4", 
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.OutlineColor= Value
    end
})
local ColorPicker55 = Tab3:CreateColorPicker({
    Name = "FOV Locked Color",
    Color = Color3.fromRGB(255, 150, 150),
    Flag = "ColorPicker55", 
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.LockedColor= Value
    end
})
 local Slideraims6 = Tab3:CreateSlider({
    Name = "FOV Thickness",
    Range = {1, 100},
    Increment = 1,
    Suffix = "",
    CurrentValue = 1,
    Flag = "Slideraims6",
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.Thickness = Value
    end,
 })
 local Toggleaim10 = Tab3:CreateToggle({
    Name = "FOV Rainbow Color Toggle",
    CurrentValue = false,
    Flag = "Toggleaim10",
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.RainbowColor = Value        
    end,
 })
 local Toggleaim11 = Tab3:CreateToggle({
    Name = "FOV Rainbow Outline Color Toggle",
    CurrentValue = false,
    Flag = "Toggleaim11",
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.RainbowOutlineColor = Value        
    end,
 })
 local Toggleaim9 = Tab3:CreateToggle({
    Name = "FOV Filled",
    CurrentValue = false,
    Flag = "Toggleaim9",
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.Filled = Value        
    end,
 })
 local Slideraims65 = Tab3:CreateSlider({
    Name = "FOV Transparency",
    Range = {0, 1},
    Increment = 0.1,
    Suffix = "",
    CurrentValue = 1,
    Flag = "Slideraims65",
    Callback = function(Value)
        ExunysDeveloperAimbot.FOVSettings.Transparency = Value
    end,
 })
 local Button2 = Tab4:CreateButton({
    Name = "Use Infinite Yield",
    Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source'))()
    end,
 })
 local Button3 = Tab4:CreateButton({
    Name = "Use CMD-X",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/CMD-X/CMD-X/master/Source",true))()
    end,
 })
 local Button6 = Tab4:CreateButton({
    Name = "Save Current Setting",
    Callback = function()        
        pcall(function()
            delfile("UH_Save\\Universal_HUB_Save.rfld")
            wait(1)
            delfile("UH_Save\\Universal_HUB_Save.rfld")
            Rayfield:LoadConfiguration()
            Rayfield:Notify({
                Title = "INFO",
                Content = "Saving...",
                Duration = 5,
                Image = 18315824167,
             })  
         end)      
         wait(6)
        Rayfield:Notify({
            Title = "INFO",
            Content = "Saved!",
            Duration = 6.5,
            Image = 18315824167,
         })
    end,
 })
 local Button4 = Tab4:CreateButton({
    Name = "Load Current Setting",
    Callback = function()  
        pcall(function()
            Rayfield:LoadConfiguration()
            Rayfield:Notify({
                Title = "INFO",
                Content = "Loading...",
                Duration = 5,
                Image = 18315824167,
             })     
         end)      
        wait(5)
        Rayfield:Notify({
            Title = "INFO",
            Content = "Loaded!",
            Duration = 6.5,
            Image = 18315824167,
         })         
    end,
 })
 local Button5 = Tab4:CreateButton({
    Name = "Delete Current Setting",
    Callback = function()      
        pcall(function()
            delfile("UH_Save\\Universal_HUB_Save.rfld")
            wait(1)
            delfile("UH_Save\\Universal_HUB_Save.rfld")
            Rayfield:Notify({
            Title = "INFO",
            Content = "Deleting...",
            Duration = 5,
            Image = 18315824167,
         })
        end) 
        wait(4)
        Rayfield:Notify({
            Title = "INFO",
            Content = "Deleted!",
            Duration = 6.5,
            Image = 18315824167,
         })
    end,
 })
